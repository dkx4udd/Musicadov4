{% comment %}
  Payment Section for Cart Page - Complete Implementation
  Save this as: sections/payment-section.liquid
{% endcomment %}

<div class="payment-section-container">
  <!-- Customer Details Section -->
  <div class="customer-details-card">
    <h3>{{ section.settings.customer_title | default: 'Customer Information' }}</h3>
    <form id="customerDetailsForm" class="customer-form">
      <div class="form-row">
        <div class="form-group">
          <label for="firstName">{{ section.settings.first_name_label | default: 'First Name' }} *</label>
          <input type="text" id="firstName" name="firstName" required>
        </div>
        <div class="form-group">
          <label for="middleName">{{ section.settings.middle_name_label | default: 'Middle Name' }}</label>
          <input type="text" id="middleName" name="middleName">
        </div>
        <div class="form-group">
          <label for="lastName">{{ section.settings.last_name_label | default: 'Last Name' }} *</label>
          <input type="text" id="lastName" name="lastName" required>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="customerEmail">{{ section.settings.email_label | default: 'Email Address' }} *</label>
          <input type="email" id="customerEmail" name="customerEmail" required>
        </div>
        <div class="form-group">
          <label for="mobilePhone">{{ section.settings.phone_label | default: 'Phone Number' }} *</label>
          <input type="tel" id="mobilePhone" name="mobilePhone" required placeholder="{{ section.settings.phone_placeholder | default: '+31 6 12345678' }}">
        </div>
      </div>

      {% if section.settings.show_delivery_info %}
        <div class="delivery-info-section">
          <div class="delivery-info-box">
            <h4>{{ section.settings.delivery_icon | default: 'üìß' }} {{ section.settings.delivery_title | default: 'Music Delivery Information' }}</h4>
            <p>{{ section.settings.delivery_description | default: 'We will send you a link via email to your personal page where you can download your music within 24 hours.' }}</p>
          </div>
        </div>
      {% endif %}
    </form>
  </div>

  <!-- Discount Code Section -->
  {% if section.settings.show_discount_section %}
    <div class="discount-card">
      <h3>{{ section.settings.discount_title | default: 'Discount Code' }}</h3>
      <div class="discount-input-container">
        <input 
          type="text" 
          id="discountCodeInput" 
          name="discountCode" 
          placeholder="{{ section.settings.discount_placeholder | default: 'Enter discount code (optional)' }}"
        >
        <button type="button" id="applyDiscountBtn" class="btn discount-apply-btn">
          {{ section.settings.apply_button_text | default: 'Apply' }}
        </button>
      </div>
      <div id="discountMessage" class="discount-message" style="display: none;"></div>
      
      {% if section.settings.show_discount_help %}
        <div class="discount-help">
          <p>{{ section.settings.discount_help_text | default: 'Have a discount code? Enter it above to save on your order!' }}</p>
        </div>
      {% endif %}
    </div>
  {% endif %}

  <!-- Terms and Conditions -->
  <div class="terms-card">
    <div class="terms-agreement">
      <div class="terms-checkbox">
        <input type="checkbox" id="agreeTerms" name="agreeTerms" required>
        <label for="agreeTerms">
          {{ section.settings.terms_text | default: 'I agree with the terms and conditions and privacy policy' }}
          {% if section.settings.privacy_link_text != blank %}
            - <a href="{{ section.settings.privacy_link | default: '/pages/privacy-policy' }}" target="_blank" class="privacy-link">
              {{ section.settings.privacy_link_text }}
            </a>
          {% endif %}
        </label>
      </div>
    </div>
  </div>

  <!-- Important Information -->
  <div class="info-card">
    <div class="info-box">
      <h4>{{ section.settings.info_title | default: 'Important Information' }}</h4>
      <ul class="info-list">
        <li>{{ section.settings.delivery_time_text | default: 'You will receive an email link to download your music within 24 hours' }}</li>
        <li>{{ section.settings.usage_text | default: 'Songs are for personal use only (contact us for commercial use)' }}</li>
        {% if section.settings.spotify_text != blank %}
          <li>{{ section.settings.spotify_text }}</li>
        {% endif %}
        {% if section.settings.show_contact_info %}
          <li>
            {{ section.settings.contact_prefix | default: 'Any questions? Contact us at:' }} 
            <a href="mailto:{{ section.settings.contact_email | default: 'contact@' | append: shop.domain }}" class="contact-link">
              {{ section.settings.contact_email | default: 'contact@' | append: shop.domain }}
            </a>
          </li>
        {% endif %}
      </ul>
    </div>
  </div>

  <!-- Checkout Actions -->
  <div class="checkout-actions">
    <button type="button" id="checkoutBtn" class="btn checkout-btn" data-processing="false">
      <span class="button-text">{{ section.settings.checkout_button_text | default: 'Complete Order & Pay' }}</span>
      <span class="button-loading" style="display: none;">
        <span class="loading-spinner"></span>
        {{ section.settings.processing_text | default: 'Processing...' }}
      </span>
    </button>
    
    <a href="{{ section.settings.continue_shopping_url | default: '/' }}" class="btn continue-shopping">
      {{ section.settings.continue_shopping_text | default: 'Continue Shopping' }}
    </a>
  </div>

  <!-- Payment Error Display -->
  <div id="paymentError" class="payment-error" style="display: none;">
    <div class="error-icon">‚ö†Ô∏è</div>
    <p class="error-message"></p>
    <button type="button" id="retryPaymentBtn" class="btn btn-secondary">
      {{ section.settings.retry_button_text | default: 'Try Again' }}
    </button>
  </div>
</div>

<!-- Enhanced JavaScript for Payment Processing -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Payment processing state management
  let paymentState = {
    isProcessing: false,
    submissionToken: null,
    timeoutId: null
  };

  // Generate unique token for duplicate prevention
  function generateToken() {
    return Date.now() + '-' + Math.random().toString(36).substr(2, 9);
  }

  // Reset payment state
  function resetPaymentState() {
    paymentState.isProcessing = false;
    paymentState.submissionToken = null;
    if (paymentState.timeoutId) {
      clearTimeout(paymentState.timeoutId);
      paymentState.timeoutId = null;
    }
    resetButtonStates();
  }

  // Reset all button states
  function resetButtonStates() {
    const buttons = ['checkoutBtn'];
    buttons.forEach(btnId => {
      const btn = document.getElementById(btnId);
      if (btn) {
        btn.disabled = false;
        btn.setAttribute('data-processing', 'false');
        const textSpan = btn.querySelector('.button-text');
        const loadingSpan = btn.querySelector('.button-loading');
        if (textSpan) textSpan.style.display = 'inline';
        if (loadingSpan) loadingSpan.style.display = 'none';
      }
    });
  }

  // Set button loading state
  function setButtonLoading(btnId, isLoading) {
    const btn = document.getElementById(btnId);
    if (!btn) return;

    if (isLoading) {
      btn.disabled = true;
      btn.setAttribute('data-processing', 'true');
      const textSpan = btn.querySelector('.button-text');
      const loadingSpan = btn.querySelector('.button-loading');
      if (textSpan) textSpan.style.display = 'none';
      if (loadingSpan) loadingSpan.style.display = 'inline-flex';
    } else {
      btn.disabled = false;
      btn.setAttribute('data-processing', 'false');
      const textSpan = btn.querySelector('.button-text');
      const loadingSpan = btn.querySelector('.button-loading');
      if (textSpan) textSpan.style.display = 'inline';
      if (loadingSpan) loadingSpan.style.display = 'none';
    }
  }

  // Validate customer details
  function validateCustomerDetails() {
    const requiredFields = ['firstName', 'lastName', 'customerEmail', 'mobilePhone'];
    let isValid = true;
    let missingFields = [];

    // Check required fields
    requiredFields.forEach(fieldName => {
      const field = document.getElementById(fieldName);
      if (!field || !field.value.trim()) {
        isValid = false;
        const label = field ? field.previousElementSibling.textContent.replace(' *', '') : fieldName;
        missingFields.push(label);
        if (field) {
          field.style.borderColor = '#ef4444';
          field.style.background = 'rgba(239, 68, 68, 0.1)';
        }
      } else {
        if (field) {
          field.style.borderColor = '';
          field.style.background = '';
        }
      }
    });

    // Validate email format
    const emailField = document.getElementById('customerEmail');
    if (emailField && emailField.value) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(emailField.value)) {
        isValid = false;
        missingFields.push('Valid email address');
        emailField.style.borderColor = '#ef4444';
        emailField.style.background = 'rgba(239, 68, 68, 0.1)';
      }
    }

    // Check terms agreement
    const termsCheckbox = document.getElementById('agreeTerms');
    const termsCard = document.querySelector('.terms-card');
    if (!termsCheckbox || !termsCheckbox.checked) {
      isValid = false;
      missingFields.push('Agreement with terms and conditions');
      if (termsCard) {
        termsCard.style.borderColor = '#ef4444';
        termsCard.style.background = 'rgba(239, 68, 68, 0.05)';
      }
    } else {
      if (termsCard) {
        termsCard.style.borderColor = '';
        termsCard.style.background = '';
      }
    }

    // Show validation errors
    if (!isValid) {
      const message = 'Please complete the following:\n‚Ä¢ ' + missingFields.join('\n‚Ä¢ ');
      alert(message);
      
      // Scroll to first error field
      const firstErrorField = document.querySelector('input[style*="border-color: rgb(239, 68, 68)"], .terms-card[style*="border-color: rgb(239, 68, 68)"]');
      if (firstErrorField) {
        firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }

    return isValid;
  }

  // Show payment error
  function showPaymentError(message) {
    const errorDiv = document.getElementById('paymentError');
    const checkoutActions = document.querySelector('.checkout-actions');
    
    if (errorDiv && checkoutActions) {
      errorDiv.querySelector('.error-message').textContent = message;
      errorDiv.style.display = 'block';
      checkoutActions.style.display = 'none';
      
      // Scroll to error
      errorDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
    
    resetPaymentState();
  }

  // Hide payment error
  function hidePaymentError() {
    const errorDiv = document.getElementById('paymentError');
    const checkoutActions = document.querySelector('.checkout-actions');
    
    if (errorDiv) errorDiv.style.display = 'none';
    if (checkoutActions) checkoutActions.style.display = 'block';
    
    resetPaymentState();
  }

  // Process checkout
  function processCheckout() {
    // Prevent duplicate submissions
    if (paymentState.isProcessing) {
      console.log('Checkout already in progress');
      return false;
    }

    // Validate form
    if (!validateCustomerDetails()) {
      return false;
    }

    // Set processing state
    paymentState.isProcessing = true;
    paymentState.submissionToken = generateToken();
    
    // Safety timeout
    paymentState.timeoutId = setTimeout(() => {
      console.warn('Checkout timeout - resetting state');
      resetPaymentState();
    }, 30000);

    // Set loading state
    setButtonLoading('checkoutBtn', true);

    try {
      // Collect customer details
      const customerForm = document.getElementById('customerDetailsForm');
      const formData = new FormData(customerForm);
      const customerDetails = {};
      
      for (let [key, value] of formData.entries()) {
        customerDetails[key] = value;
      }

      // Update cart and proceed to checkout
      updateCartWithCustomerDetails(customerDetails);

    } catch (error) {
      console.error('Checkout error:', error);
      showPaymentError('An unexpected error occurred. Please try again.');
    }
  }

  // Update cart with customer information
  function updateCartWithCustomerDetails(customerDetails) {
    const customerNote = `Customer Information:
Name: ${customerDetails.firstName} ${customerDetails.middleName || ''} ${customerDetails.lastName}
Email: ${customerDetails.customerEmail}
Phone: ${customerDetails.mobilePhone}
Order Date: ${new Date().toLocaleString()}`;

    // Update cart note
    fetch('/cart/update.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        note: customerNote
      })
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('Cart updated successfully:', data);
      
      // Show success message briefly
      showSuccessMessage('Order updated! Redirecting to checkout...');
      
      // Redirect to checkout
      setTimeout(() => {
        window.location.href = '/checkout';
      }, 1500);
    })
    .catch(error => {
      console.error('Error updating cart:', error);
      showPaymentError('Failed to update order information. Please try again.');
    });
  }

  // Show success message
  function showSuccessMessage(message) {
    const notification = document.createElement('div');
    notification.className = 'success-notification';
    notification.innerHTML = `
      <div class="success-icon">‚úÖ</div>
      <div class="success-text">${message}</div>
    `;
    
    // Add styles
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #10b981 0%, #059669 100%);
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 12px;
      box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
      z-index: 10000;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-weight: 600;
      animation: slideInRight 0.3s ease-out;
      max-width: 300px;
    `;
    
    document.body.appendChild(notification);
    
    // Remove after delay
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 3000);
  }

  // Apply discount code
  function applyDiscountCode() {
    const codeInput = document.getElementById('discountCodeInput');
    const messageDiv = document.getElementById('discountMessage');
    const applyBtn = document.getElementById('applyDiscountBtn');
    
    if (!codeInput || !messageDiv || !applyBtn) return;
    
    const code = codeInput.value.trim().toUpperCase();
    
    // Reset previous state
    messageDiv.style.display = 'none';
    messageDiv.className = 'discount-message';
    
    if (!code) {
      showDiscountMessage('error', 'Please enter a discount code.');
      return;
    }
    
    // Set loading state
    applyBtn.disabled = true;
    applyBtn.textContent = 'Applying...';
    
    // Simulate discount application (replace with actual logic)
    setTimeout(() => {
      if (code === '15%MUSIC' || code === 'WELCOME15' || code === 'SAVE15') {
        // Success
        showDiscountMessage('success', 'Discount code applied successfully! 15% off your order.');
        codeInput.disabled = true;
        applyBtn.textContent = 'Applied ‚úì';
        applyBtn.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
        applyBtn.style.color = 'white';
        
        // Trigger cart refresh to show discount
        setTimeout(() => {
          window.location.reload();
        }, 1000);
        
      } else {
        // Error
        showDiscountMessage('error', 'Invalid discount code. Please check and try again.');
        applyBtn.disabled = false;
        applyBtn.textContent = '{{ section.settings.apply_button_text | default: "Apply" }}';
      }
    }, 1000);
  }

  // Show discount message
  function showDiscountMessage(type, message) {
    const messageDiv = document.getElementById('discountMessage');
    if (messageDiv) {
      messageDiv.className = `discount-message ${type}`;
      messageDiv.textContent = message;
      messageDiv.style.display = 'block';
    }
  }

  // Event Listeners
  const checkoutBtn = document.getElementById('checkoutBtn');
  const applyDiscountBtn = document.getElementById('applyDiscountBtn');
  const retryPaymentBtn = document.getElementById('retryPaymentBtn');
  const discountInput = document.getElementById('discountCodeInput');

  if (checkoutBtn) {
    checkoutBtn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      processCheckout();
    });
  }

  if (applyDiscountBtn) {
    applyDiscountBtn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      applyDiscountCode();
    });
  }

  if (retryPaymentBtn) {
    retryPaymentBtn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      hidePaymentError();
    });
  }

  // Allow Enter key to apply discount
  if (discountInput) {
    discountInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        applyDiscountCode();
      }
    });
  }

  // Page unload prevention during processing
  window.addEventListener('beforeunload', function(e) {
    if (paymentState.isProcessing) {
      e.preventDefault();
      e.returnValue = 'Your order is being processed. Are you sure you want to leave?';
      return e.returnValue;
    }
  });

  // Auto-clear validation errors on input
  const formInputs = document.querySelectorAll('#customerDetailsForm input');
  formInputs.forEach(input => {
    input.addEventListener('input', function() {
      if (this.style.borderColor === 'rgb(239, 68, 68)') {
        this.style.borderColor = '';
        this.style.background = '';
      }
    });
  });

  // Clear terms validation error on check
  const termsCheckbox = document.getElementById('agreeTerms');
  if (termsCheckbox) {
    termsCheckbox.addEventListener('change', function() {
      const termsCard = document.querySelector('.terms-card');
      if (this.checked && termsCard) {
        termsCard.style.borderColor = '';
        termsCard.style.background = '';
      }
    });
  }
});
</script>

<style>
.payment-section-container {
  max-width: 600px;
  margin: 0 auto;
  padding: 0;
}

.customer-details-card,
.discount-card,
.terms-card,
.info-card {
  background: rgba(30, 41, 59, 0.4);
  backdrop-filter: blur(25px) saturate(180%);
  border-radius: 20px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 
    0 20px 50px rgba(0,0,0,0.4),
    inset 0 1px 0 rgba(255, 255, 255, 0.1),
    0 0 0 1px rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(59, 130, 246, 0.2);
  color: #e2e8f0;
  transition: all 0.3s ease;
}

.customer-details-card h3,
.discount-card h3,
.terms-card h3,
.info-card h4 {
  color: #06b6d4;
  margin-bottom: 1.5rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.customer-details-card h3::before {
  content: "üë§";
  font-size: 1.2em;
}

.discount-card h3::before {
  content: "üé´";
  font-size: 1.2em;
}

.terms-card h3::before {
  content: "üìã";
  font-size: 1.2em;
}

.info-card h4::before {
  content: "‚ÑπÔ∏è";
  font-size: 1.2em;
}

.form-row {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  margin-bottom: 1rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: #f1f5f9;
  font-size: 0.95rem;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 14px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  font-size: 1rem;
  transition: all 0.3s ease;
  background: rgba(15, 23, 42, 0.4);
  backdrop-filter: blur(10px);
  color: #e2e8f0;
  box-shadow: 
    inset 0 1px 3px rgba(0, 0, 0, 0.2),
    0 1px 0 rgba(255, 255, 255, 0.05);
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none;
  border-color: rgba(59, 130, 246, 0.6);
  box-shadow: 
    0 0 0 3px rgba(59, 130, 246, 0.1),
    inset 0 1px 3px rgba(0, 0, 0, 0.2),
    0 0 20px rgba(59, 130, 246, 0.2);
  background: rgba(15, 23, 42, 0.6);
  transform: translateY(-1px);
}

.form-group input::placeholder {
  color: #94a3b8;
}

.delivery-info-section {
  margin-top: 2rem;
}

.delivery-info-box {
  background: rgba(59, 130, 246, 0.1);
  border: 2px solid rgba(59, 130, 246, 0.3);
  border-radius: 12px;
  padding: 1.5rem;
  text-align: center;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.delivery-info-box:hover {
  background: rgba(59, 130, 246, 0.15);
  transform: translateY(-2px);
}

.delivery-info-box h4 {
  color: #06b6d4;
  margin-bottom: 0.5rem;
  font-size: 1.1rem;
  font-weight: 600;
}

.delivery-info-box p {
  color: #e2e8f0;
  font-size: 1rem;
  line-height: 1.6;
  margin: 0;
}

.discount-input-container {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.discount-input-container input {
  flex: 1;
  text-transform: uppercase;
}

.discount-apply-btn {
  padding: 14px 20px;
  background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
  border: none;
  border-radius: 12px;
  color: #1e293b;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  white-space: nowrap;
  min-width: 100px;
}

.discount-apply-btn:hover:not(:disabled) {
  background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(251, 191, 36, 0.3);
}

.discount-apply-btn:disabled {
  opacity: 0.7;
  cursor: not-allowed;
  transform: none;
}

.discount-message {
  padding: 12px;
  border-radius: 8px;
  font-size: 0.9rem;
  font-weight: 500;
  margin-top: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.discount-message.success {
  background: rgba(16, 185, 129, 0.1);
  border: 1px solid rgba(16, 185, 129, 0.3);
  color: #10b981;
}

.discount-message.success::before {
  content: "‚úÖ";
}

.discount-message.error {
  background: rgba(239, 68, 68, 0.1);
  border: 1px solid rgba(239, 68, 68, 0.3);
  color: #ef4444;
}

.discount-message.error::before {
  content: "‚ùå";
}

.discount-help {
  margin-top: 1rem;
  padding: 1rem;
  background: rgba(59, 130, 246, 0.05);
  border-radius: 8px;
  border: 1px solid rgba(59, 130, 246, 0.1);
}

.discount-help p {
  color: #94a3b8;
  font-size: 0.85rem;
  margin: 0;
  text-align: center;
  font-style: italic;
}

.terms-agreement {
  background: rgba(15, 23, 42, 0.6);
  border-radius: 12px;
  padding: 1.5rem;
  border: 2px solid rgba(59, 130, 246, 0.2);
  transition: all 0.3s ease;
}

.terms-checkbox {
  display: flex;
  align-items: flex-start;
  gap: 1rem;
  cursor: pointer;
}

.terms-checkbox input[type="checkbox"] {
  width: auto;
  min-width: 20px;
  height: 20px;
  margin: 0;
  cursor: pointer;
  accent-color: #3b82f6;
  transform: scale(1.1);
}

.terms-checkbox label {
  margin: 0;
  color: #e2e8f0;
  line-height: 1.5;
  cursor: pointer;
  font-size: 1rem;
}

.privacy-link {
  color: #06b6d4;
  text-decoration: underline;
  font-weight: 500;
  transition: color 0.3s ease;
}

.privacy-link:hover {
  color: #0284c7;
}

.info-box {
  background: rgba(6, 182, 212, 0.1);
  border: 2px solid rgba(6, 182, 212, 0.3);
  border-radius: 12px;
  padding: 1.5rem;
  transition: all 0.3s ease;
}

.info-box:hover {
  background: rgba(6, 182, 212, 0.15);
  transform: translateY(-2px);
}

.info-box h4 {
  color: #06b6d4;
  margin-bottom: 1rem;
  font-weight: 600;
}

.info-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.info-list li {
  padding: 0.5rem 0;
  color: #cbd5e1;
  line-height: 1.5;
  display: flex;
  align-items: flex-start;
  gap: 0.5rem;
}

.info-list li::before {
  content: "‚úì";
  color: #10b981;
  font-weight: bold;
  font-size: 1.1em;
  margin-top: 0.1rem;
  flex-shrink: 0;
}

.contact-link {
  color: #06b6d4;
  text-decoration: none;
  font-weight: 600;
  transition: color 0.3s ease;
}

.contact-link:hover {
  text-decoration: underline;
  color: #0284c7;
}

.checkout-actions {
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin-bottom: 2rem;
}

.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 16px 24px;
  border: none;
  border-radius: 12px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  text-decoration: none;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  position: relative;
  overflow: hidden;
}

.btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, 
    transparent, 
    rgba(255, 255, 255, 0.2), 
    transparent);
  transition: left 0.4s ease;
  pointer-events: none;
}

.btn:hover::before {
  left: 100%;
}

.checkout-btn {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
  font-size: 18px;
  padding: 18px 24px;
  box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
  min-height: 60px;
}

.checkout-btn:hover:not(:disabled) {
  background: linear-gradient(135deg, #059669 0%, #047857 100%);
  transform: translateY(-2px);
  box-shadow: 0 15px 35px rgba(16, 185, 129, 0.4);
}

.checkout-btn:disabled {
  opacity: 0.8;
  cursor: not-allowed;
  transform: none;
  box-shadow: 0 8px 25px rgba(16, 185, 129, 0.2);
}

.button-loading {
  display: none;
  align-items: center;
  gap: 0.5rem;
  justify-content: center;
}

.loading-spinner {
  width: 18px;
  height: 18px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-top: 2px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.continue-shopping {
  background: rgba(107, 114, 128, 0.8);
  color: white;
  border: 1px solid rgba(156, 163, 175, 0.3);
}

.continue-shopping:hover {
  background: rgba(75, 85, 99, 0.9);
  transform: translateY(-1px);
}

.payment-error {
  background: rgba(239, 68, 68, 0.1);
  border: 1px solid rgba(239, 68, 68, 0.3);
  border-radius: 12px;
  padding: 2rem;
  text-align: center;
  margin-bottom: 2rem;
}

.error-icon {
  font-size: 2rem;
  margin-bottom: 1rem;
}

.payment-error .error-message {
  color: #ef4444;
  margin-bottom: 1.5rem;
  font-weight: 500;
  font-size: 1.1rem;
}

.btn-secondary {
  background: rgba(107, 114, 128, 0.8);
  color: white;
  border: 1px solid rgba(156, 163, 175, 0.3);
}

.btn-secondary:hover {
  background: rgba(75, 85, 99, 0.9);
  transform: translateY(-1px);
}

/* Success notification animation */
@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  .payment-section-container {
    margin: 0;
    padding: 0 10px;
  }
  
  .customer-details-card,
  .discount-card,
  .terms-card,
  .info-card {
    padding: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .form-row {
    grid-template-columns: 1fr;
    gap: 0.5rem;
  }
  
  .discount-input-container {
    flex-direction: column;
  }
  
  .discount-apply-btn {
    min-width: unset;
    width: 100%;
  }
}

@media (max-width: 480px) {
  .customer-details-card,
  .discount-card,
  .terms-card,
  .info-card {
    padding: 1rem;
  }
  
  .checkout-btn {
    font-size: 16px;
    padding: 16px 20px;
    min-height: 56px;
  }
  
  .form-group input,
  .form-group select,
  .form-group textarea {
    padding: 12px;
  }
}
</style>

{% schema %}
{
  "name": "Payment Section",
  "settings": [
    {
      "type": "header",
      "content": "Customer Information"
    },
    {
      "type": "text",
      "id": "customer_title",
      "label": "Customer Section Title",
      "default": "Customer Information",
      "info": "Title for the customer details section"
    },
    {
      "type": "text",
      "id": "first_name_label",
      "label": "First Name Label",
      "default": "First Name",
      "info": "Label for first name field"
    },
    {
      "type": "text",
      "id": "middle_name_label",
      "label": "Middle Name Label",
      "default": "Middle Name",
      "info": "Label for middle name field"
    },
    {
      "type": "text",
      "id": "last_name_label",
      "label": "Last Name Label",
      "default": "Last Name",
      "info": "Label for last name field"
    },
    {
      "type": "text",
      "id": "email_label",
      "label": "Email Label",
      "default": "Email Address",
      "info": "Label for email field"
    },
    {
      "type": "text",
      "id": "phone_label",
      "label": "Phone Label",
      "default": "Phone Number",
      "info": "Label for phone field"
    },
    {
      "type": "text",
      "id": "phone_placeholder",
      "label": "Phone Placeholder",
      "default": "+31 6 12345678",
      "info": "Placeholder text for phone number field"
    },
    {
      "type": "header",
      "content": "Delivery Information"
    },
    {
      "type": "checkbox",
      "id": "show_delivery_info",
      "label": "Show Delivery Information",
      "default": true,
      "info": "Display delivery information section"
    },
    {
      "type": "text",
      "id": "delivery_icon",
      "label": "Delivery Icon",
      "default": "üìß",
      "info": "Icon for delivery information"
    },
    {
      "type": "text",
      "id": "delivery_title",
      "label": "Delivery Title",
      "default": "Music Delivery Information",
      "info": "Title for delivery information"
    },
    {
      "type": "textarea",
      "id": "delivery_description",
      "label": "Delivery Description",
      "default": "We will send you a link via email to your personal page where you can download your music within 24 hours.",
      "info": "Description of delivery process"
    },
    {
      "type": "header",
      "content": "Discount Settings"
    },
    {
      "type": "checkbox",
      "id": "show_discount_section",
      "label": "Show Discount Section",
      "default": true,
      "info": "Display discount code section"
    },
    {
      "type": "text",
      "id": "discount_title",
      "label": "Discount Title",
      "default": "Discount Code",
      "info": "Title for discount section"
    },
    {
      "type": "text",
      "id": "discount_placeholder",
      "label": "Discount Placeholder",
      "default": "Enter discount code (optional)",
      "info": "Placeholder for discount input"
    },
    {
      "type": "text",
      "id": "apply_button_text",
      "label": "Apply Button Text",
      "default": "Apply",
      "info": "Text for apply discount button"
    },
    {
      "type": "checkbox",
      "id": "show_discount_help",
      "label": "Show Discount Help",
      "default": false,
      "info": "Show discount help text"
    },
    {
      "type": "text",
      "id": "discount_help_text",
      "label": "Discount Help Text",
      "default": "Have a discount code? Enter it above to save on your order!",
      "info": "Help text for discount section"
    },
    {
      "type": "header",
      "content": "Terms and Conditions"
    },
    {
      "type": "textarea",
      "id": "terms_text",
      "label": "Terms Text",
      "default": "I agree with the terms and conditions and privacy policy",
      "info": "Text for terms checkbox"
    },
    {
      "type": "text",
      "id": "privacy_link_text",
      "label": "Privacy Link Text",
      "default": "Read our full privacy policy",
      "info": "Text for privacy policy link (leave blank to hide)"
    },
    {
      "type": "text",
      "id": "privacy_link",
      "label": "Privacy Policy URL",
      "default": "/pages/privacy-policy",
      "info": "URL to privacy policy page"
    },
    {
      "type": "header",
      "content": "Important Information"
    },
    {
      "type": "text",
      "id": "info_title",
      "label": "Info Title",
      "default": "Important Information",
      "info": "Title for information section"
    },
    {
      "type": "text",
      "id": "delivery_time_text",
      "label": "Delivery Time Text",
      "default": "You will receive an email link to download your music within 24 hours",
      "info": "Text about delivery timeframe"
    },
    {
      "type": "text",
      "id": "usage_text",
      "label": "Usage Text",
      "default": "Songs are for personal use only (contact us for commercial use)",
      "info": "Text about usage rights"
    },
    {
      "type": "text",
      "id": "spotify_text",
      "label": "Spotify Text",
      "default": "We can publish your song on Spotify upon request",
      "info": "Text about Spotify (leave blank to hide)"
    },
    {
      "type": "checkbox",
      "id": "show_contact_info",
      "label": "Show Contact Information",
      "default": true,
      "info": "Display contact information"
    },
    {
      "type": "text",
      "id": "contact_prefix",
      "label": "Contact Text Prefix",
      "default": "Any questions? Contact us at:",
      "info": "Text before contact email"
    },
    {
      "type": "text",
      "id": "contact_email",
      "label": "Contact Email",
      "default": "contact@musicado.nl",
      "info": "Contact email address"
    },
    {
      "type": "header",
      "content": "Checkout Actions"
    },
    {
      "type": "text",
      "id": "checkout_button_text",
      "label": "Checkout Button Text",
      "default": "Complete Order & Pay",
      "info": "Text for checkout button"
    },
    {
      "type": "text",
      "id": "processing_text",
      "label": "Processing Text",
      "default": "Processing...",
      "info": "Text shown while processing"
    },
    {
      "type": "text",
      "id": "continue_shopping_text",
      "label": "Continue Shopping Text",
      "default": "Continue Shopping",
      "info": "Text for continue shopping button"
    },
    {
      "type": "url",
      "id": "continue_shopping_url",
      "label": "Continue Shopping URL",
      "default": "/",
      "info": "URL for continue shopping"
    },
    {
      "type": "text",
      "id": "retry_button_text",
      "label": "Retry Button Text",
      "default": "Try Again",
      "info": "Text for retry button"
    }
  ],
  "presets": [
    {
      "name": "Payment Section"
    }
  ]
}
{% endschema %}
